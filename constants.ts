import { Language, AllocationCategory, Transaction, TransactionType, Allocation } from './types';

export const translations = {
  pt: {
    appName: "FinanZen",
    dashboard: "Dashboard",
    transactions: "Transações",
    allocations: "Alocações",
    settings: "Configurações",
    totalBalance: "Saldo Total",
    totalIncome: "Receita Total",
    totalExpenses: "Despesas Totais",
    totalSaved: "Total Economizado",
    savingsRate: "Taxa de Poupança",
    recentTransactions: "Transações Recentes",
    noTransactions: "Nenhuma transação encontrada.",
    addTransaction: "Adicionar Transação",
    editTransaction: "Editar Transação",
    type: "Tipo",
    income: "Receita",
    expense: "Despesa",
    description: "Descrição",
    amount: "Valor",
    date: "Data",
    save: "Salvar",
    cancel: "Cancelar",
    delete: "Excluir",
    edit: "Editar",
    confirm: "Confirmar",
    deleteConfirmation: "Confirmação de Exclusão",
    areYouSureDelete: "Você tem certeza que quer excluir este item?",
    salary: "Salário",
    fixedCosts: "Custos fixos",
    savingsAllocation: "Alocação de Economias",
    investments: "Investimentos",
    emergencyFund: "Fundo de Emergência",
    goals: "Metas",
    unallocated: "Não Alocado",
    allocateSavings: "Alocar Economias",
    category: "Categoria",
    language: "Idioma",
    theme: "Tema",
    light: "Claro",
    dark: "Escuro",
    emergencyFundGoal: "Meta do Fundo de Emergência",
    setGoal: "Definir Meta",
    goalReached: "Meta Atingida!",
    ofGoal: "da meta",
    getFinancialInsights: "Obter Insights com IA",
    generatingInsights: "Gerando insights...",
    insightsError: "Erro ao gerar insights.",
    yourFinancialInsights: "Seus Insights Financeiros",
    close: "Fechar",
    allTransactions: "Todas as Transações",
    allAllocations: "Todas as Alocações",
    addAllocation: "Adicionar Alocação",
    editAllocation: "Editar Alocação",
    noAllocations: "Nenhuma alocação encontrada.",
    availableToAllocate: "Disponível para Alocar",
    exportToCSV: "Exportar para CSV",
    welcomeToFinanZen: "Bem-vindo ao FinanZen!",
    startYourJourney: "Comece sua jornada financeira adicionando sua primeira transação ou explore com dados de exemplo.",
    loadSampleData: "Carregar Dados de Exemplo",
    day: "Dia",
    actions: "Ações",
    filterBy: "Filtrar por",
    allTime: "Todo o Período",
    year: "Ano",
    month: "Mês",
    clearFilter: "Limpar Filtro",
    noDataForPeriod: "Nenhum dado para o período selecionado.",
    
    // Recurring & Projections
    recurring: "Recorrentes",
    addRecurring: "Adicionar Recorrente",
    editRecurring: "Editar Recorrente",
    startDate: "Data de Início",
    endDate: "Data de Fim (Opcional)",
    projectedNetWorth: "Projeção de Patrimônio",
    next5Years: "Próximos 5 anos",
    contributions: "Aportes",
    growth: "Crescimento (Juros)",
    contributionsVsGrowth: "Aportes vs. Crescimento",
    investmentsValue: "Valor dos Investimentos",
    totalContributions: "Total Aportado",
    totalGrowth: "Crescimento Total",
    noRecurringTransactions: "Nenhuma transação recorrente encontrada.",

    // Receivables
    receivables: "A Receber",
    addReceivable: "Adicionar a Receber",
    editReceivable: "Editar a Receber",
    clientName: "Cliente",
    dueDate: "Vencimento",
    status: "Status",
    pending: "Pendente",
    billed: "Faturado",
    paid: "Pago",
    overdue: "Atrasado",
    markAsPaid: "Marcar como Recebido",
    confirmMarkAsPaid: "Deseja marcar como recebido? Uma transação de receita será criada.",
    noReceivables: "Nenhum item a receber encontrado.",

    // Reminders
    reminders: "Lembretes",
    addReminder: "Adicionar Lembrete",
    editReminder: "Editar Lembrete",
    dueDay: "Dia do Vencimento",
    markAsPaidReminder: "Marcar como Pago",
    confirmMarkAsPaidReminder: "Deseja marcar como pago? Uma transação de despesa será criada.",
    noReminders: "Nenhum lembrete de conta encontrado.",
    paidStatus: "Pago",
    pendingStatus: "Pendente",
    overdueStatus: "Atrasado",

    // Allocations v2
    investmentType: "Tipo de Investimento",
    annualRate: "Taxa Anual (%)",
    portfolioBreakdown: "Composição da Carteira",
    unclassified: "Não Classificado",
  },
  en: {
    appName: "FinanZen",
    dashboard: "Dashboard",
    transactions: "Transactions",
    allocations: "Allocations",
    settings: "Settings",
    totalBalance: "Total Balance",
    totalIncome: "Total Income",
    totalExpenses: "Total Expenses",
    totalSaved: "Total Saved",
    savingsRate: "Savings Rate",
    recentTransactions: "Recent Transactions",
    noTransactions: "No transactions found.",
    addTransaction: "Add Transaction",
    editTransaction: "Edit Transaction",
    type: "Type",
    income: "Income",
    expense: "Expense",
    description: "Description",
    amount: "Amount",
    date: "Date",
    save: "Save",
    cancel: "Cancel",
    delete: "Delete",
    edit: "Edit",
    confirm: "Confirm",
    deleteConfirmation: "Delete Confirmation",
    areYouSureDelete: "Are you sure you want to delete this item?",
    salary: "Salary",
    fixedCosts: "Fixed costs",
    savingsAllocation: "Savings Allocation",
    investments: "Investments",
    emergencyFund: "Emergency Fund",
    goals: "Goals",
    unallocated: "Unallocated",
    allocateSavings: "Allocate Savings",
    category: "Category",
    language: "Language",
    theme: "Theme",
    light: "Light",
    dark: "Dark",
    emergencyFundGoal: "Emergency Fund Goal",
    setGoal: "Set Goal",
    goalReached: "Goal Reached!",
    ofGoal: "of goal",
    getFinancialInsights: "Get AI Financial Insights",
    generatingInsights: "Generating insights...",
    insightsError: "Error generating insights.",
    yourFinancialInsights: "Your Financial Insights",
    close: "Close",
    allTransactions: "All Transactions",
    allAllocations: "All Allocations",
    addAllocation: "Add Allocation",
    editAllocation: "Edit Allocation",
    noAllocations: "No allocations found.",
    availableToAllocate: "Available to Allocate",
    exportToCSV: "Export to CSV",
    welcomeToFinanZen: "Welcome to FinanZen!",
    startYourJourney: "Start your financial journey by adding your first transaction, or explore with sample data.",
    loadSampleData: "Load Sample Data",
    day: "Day",
    actions: "Actions",
    filterBy: "Filter by",
    allTime: "All Time",
    year: "Year",
    month: "Month",
    clearFilter: "Clear Filter",
    noDataForPeriod: "No data for the selected period.",

    // Recurring & Projections
    recurring: "Recurring",
    addRecurring: "Add Recurring",
    editRecurring: "Edit Recurring",
    startDate: "Start Date",
    endDate: "End Date (Optional)",
    projectedNetWorth: "Projected Net Worth",
    next5Years: "Next 5 years",
    contributions: "Contributions",
    growth: "Growth (Interest)",
    contributionsVsGrowth: "Contributions vs. Growth",
    investmentsValue: "Investments Value",
    totalContributions: "Total Contributions",
    totalGrowth: "Total Growth",
    noRecurringTransactions: "No recurring transactions found.",

    // Receivables
    receivables: "Receivables",
    addReceivable: "Add Receivable",
    editReceivable: "Edit Receivable",
    clientName: "Client",
    dueDate: "Due Date",
    status: "Status",
    pending: "Pending",
    billed: "Billed",
    paid: "Paid",
    overdue: "Overdue",
    markAsPaid: "Mark as Paid",
    confirmMarkAsPaid: "Mark as paid? An income transaction will be created.",
    noReceivables: "No receivables found.",

    // Reminders
    reminders: "Reminders",
    addReminder: "Add Reminder",
    editReminder: "Edit Reminder",
    dueDay: "Due Day",
    markAsPaidReminder: "Mark as Paid",
    confirmMarkAsPaidReminder: "Mark as paid? An expense transaction will be created.",
    noReminders: "No account reminders found.",
    paidStatus: "Paid",
    pendingStatus: "Pending",
    overdueStatus: "Overdue",

    // Allocations v2
    investmentType: "Investment Type",
    annualRate: "Annual Rate (%)",
    portfolioBreakdown: "Portfolio Breakdown",
    unclassified: "Unclassified",
  }
};

export const allocationCategoryLabels: Record<Language, Record<AllocationCategory, string>> = {
  pt: {
    [AllocationCategory.INVESTMENTS]: "Investimentos",
    [AllocationCategory.EMERGENCY_FUND]: "Fundo de Emergência",
    [AllocationCategory.GOALS]: "Metas (Viagem, etc.)",
  },
  en: {
    [AllocationCategory.INVESTMENTS]: "Investments",
    [AllocationCategory.EMERGENCY_FUND]: "Emergency Fund",
    [AllocationCategory.GOALS]: "Goals (Trip, etc.)",
  },
};

const today = new Date();
const formatDateString = (d: Date) => d.toISOString().split('T')[0];

export const sampleTransactions: Transaction[] = [
  { id: 'sample-tx-1', date: formatDateString(new Date(today.getFullYear(), today.getMonth(), -15)), description: 'Salário', amount: 5000, type: TransactionType.INCOME },
  { id: 'sample-tx-2', date: formatDateString(new Date(today.getFullYear(), today.getMonth(), -14)), description: 'Aluguel', amount: 1500, type: TransactionType.EXPENSE },
  { id: 'sample-tx-3', date: formatDateString(new Date(today.getFullYear(), today.getMonth(), -12)), description: 'Supermercado', amount: 450, type: TransactionType.EXPENSE },
  { id: 'sample-tx-4', date: formatDateString(new Date(today.getFullYear(), today.getMonth(), -10)), description: 'Freelance', amount: 750, type: TransactionType.INCOME },
  { id: 'sample-tx-5', date: formatDateString(new Date(today.getFullYear(), today.getMonth(), -7)), description: 'Restaurante', amount: 120, type: TransactionType.EXPENSE },
  { id: 'sample-tx-6', date: formatDateString(new Date(today.getFullYear(), today.getMonth(), -5)), description: 'Transporte', amount: 80, type: TransactionType.EXPENSE },
  { id: 'sample-tx-7', date: formatDateString(new Date(today.getFullYear(), today.getMonth(), -2)), description: 'Internet', amount: 100, type: TransactionType.EXPENSE },
];

export const sampleAllocations: Allocation[] = [
    { id: 'sample-al-1', date: formatDateString(new Date(today.getFullYear(), today.getMonth(), -14)), category: AllocationCategory.EMERGENCY_FUND, amount: 1000, description: 'Transferência mensal' },
    { id: 'sample-al-2', date: formatDateString(new Date(today.getFullYear(), today.getMonth(), -9)), category: AllocationCategory.INVESTMENTS, amount: 500, description: 'Aporte em Ações', interestRate: 12, investmentType: 'Ações' },
    { id: 'sample-al-3', date: formatDateString(new Date(today.getFullYear(), today.getMonth(), -1)), category: AllocationCategory.GOALS, amount: 250, description: 'Economia para Viagem' },
];
